#include <SPI.h>
#include "DW1000Ranging.h"
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <WiFiUdp.h>

// Adjustable Parameters
// WiFi credentials
const char* ssid = "xxxxxxx";       // Replace with your WiFi network name
const char* password = "xxxxxxx";  // Replace with your WiFi password

// Network and UDP configuration
const char* udpAddress = "192.168.1.xxx"; // IP address for the UDP host
const int udpPort = 7000;               // UDP port

// Calibration and timing
const float calibrationOffset = 1.35; // Calibrate based on your setup
const float minDistance = 0.0; // Minimum plausible distance in meters
const float maxDistance = 15.0; // Maximum plausible distance in meters
const unsigned long sendRate = 300; // Time in milliseconds between sends

// UWB configuration
#define TAG_ADDR "7D:00:22:EA:82:60:3B:9B"
#define SPI_SCK 18
#define SPI_MISO 19
#define SPI_MOSI 23
#define UWB_RST 27
#define UWB_IRQ 34
#define UWB_SS 21

// Display configuration
#define I2C_SDA 4
#define I2C_SCL 5

WiFiUDP udp;
Adafruit_SSD1306 display(128, 64, &Wire, -1);

struct Link {
    uint16_t anchor_addr;
    float range;
    float dbm;
    struct Link *next;
};
struct Link *uwb_data;

unsigned long runtime = 0;

void setup() {
    Serial.begin(115200);

    // Initialize the display
    Wire.begin(I2C_SDA, I2C_SCL);
    delay(300);
    if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
        Serial.println(F("SSD1306 allocation failed"));
        for (;;);
    }
    display.clearDisplay();
    logoshow();

    // Initialize the DW1000 module
    DW1000.begin(UWB_IRQ, UWB_RST);
    DW1000.setPulseFrequency(64);
    DW1000.setChannel(7);
    DW1000.setNetworkId(10);
    DW1000.setDeviceAddress(1);

    SPI.begin(SPI_SCK, SPI_MISO, SPI_MOSI);
    DW1000Ranging.initCommunication(UWB_RST, UWB_SS, UWB_IRQ);
    DW1000Ranging.attachNewRange(newRange);
    DW1000Ranging.attachNewDevice(newDevice);
    DW1000Ranging.attachInactiveDevice(inactiveDevice);
    DW1000Ranging.startAsTag(TAG_ADDR, DW1000.MODE_LONGDATA_RANGE_LOWPOWER);
    uwb_data = init_link();

    // Attempt to connect to WiFi
    connectToWiFi();
}

void loop() {
    DW1000Ranging.loop();
    if ((millis() - runtime) > sendRate) {
        display_uwb(uwb_data);
        if (WiFi.status() == WL_CONNECTED) {
            sendUdpData();
        }
        runtime = millis();
    }
}

void connectToWiFi() {
    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid, password);
    Serial.print("Connecting to WiFi");
    int attempt = 0;
    while (WiFi.status() != WL_CONNECTED && attempt < 10) {
        delay(700);
        Serial.print(".");
        attempt++;
    }
    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("\nWiFi connected");
        Serial.print("IP address: ");
        Serial.println(WiFi.localIP());
        udp.begin(udpPort);
    } else {
        Serial.println("\nWiFi connection failed");
    }
}

void sendUdpData() {
    if (uwb_data != NULL) {
        struct Link *temp = uwb_data;
        while (temp != NULL) {
            // Skip entries with anchor_addr of 0
            if (temp->anchor_addr != 0) {
                String message = String(temp->anchor_addr, HEX) + ": " + String(temp->range) + "m, " + String(temp->dbm) + "dBm;";
                Serial.println("Sending UDP: " + message);  // Debug print
                udp.beginPacket(udpAddress, udpPort);
                udp.print(message);
                udp.endPacket();
            }
            temp = temp->next;
        }
    }
}

void newRange() {
    float rawDistance = DW1000Ranging.getDistantDevice()->getRange();
    uint16_t address = DW1000Ranging.getDistantDevice()->getShortAddress();
    float calibratedDistance = rawDistance - calibrationOffset;

    if (calibratedDistance < minDistance || calibratedDistance > maxDistance) {
        Serial.print("Discarding out-of-range value for anchor ");
        Serial.print(address, HEX);
        Serial.print(": ");
        Serial.print(calibratedDistance);
        Serial.println("m");
        return;
    }

    Serial.print("from: ");
    Serial.print(address, HEX);
    Serial.print("\t Calibrated Range: ");
    Serial.print(calibratedDistance);
    Serial.print(" m\t RX power: ");
    Serial.print(DW1000Ranging.getDistantDevice()->getRXPower());
    Serial.println(" dBm");

    fresh_link(uwb_data, address, calibratedDistance, DW1000Ranging.getDistantDevice()->getRXPower());
}

void newDevice(DW1000Device *device) {
    Serial.print("ranging init; 1 device added ! -> ");
    Serial.print(" short:");
    Serial.println(device->getShortAddress(), HEX);

    add_link(uwb_data, device->getShortAddress());
}

void inactiveDevice(DW1000Device *device) {
    Serial.print("delete inactive device: ");
    Serial.println(device->getShortAddress(), HEX);

    delete_link(uwb_data, device->getShortAddress());
}

// Data Link

struct Link *init_link() {
    struct Link *p = (struct Link *)malloc(sizeof(struct Link));
    p->next = NULL;
    p->anchor_addr = 0;
    p->range = 0.0;
    p->dbm = 0.0;  // Initialize dBm to 0 to avoid junk values
    return p;
}

void add_link(struct Link *p, uint16_t addr) {
    struct Link *temp = p;
    while (temp->next != NULL) {
        temp = temp->next;
    }

    struct Link *a = (struct Link *)malloc(sizeof(struct Link));
    a->anchor_addr = addr;
    a->range = 0.0;
    a->dbm = 0.0;
    a->next = NULL;

    temp->next = a;
}

struct Link *find_link(struct Link *p, uint16_t addr) {
    if (addr == 0) {
        Serial.println("find_link:Input addr is 0");
        return NULL;
    }

    if (p->next == NULL) {
        Serial.println("find_link:Link is empty");
        return NULL;
    }

    struct Link *temp = p;
    while (temp->next != NULL) {
        temp = temp->next;
        if (temp->anchor_addr == addr) {
            return temp;
        }
    }

    Serial.println("find_link:Can't find addr");
    return NULL;
}

void fresh_link(struct Link *p, uint16_t addr, float range, float dbm) {
    struct Link *temp = find_link(p, addr);
    if (temp != NULL) {
        temp->range = range;
        temp->dbm = dbm;
    } else {
        Serial.println("fresh_link:Fresh fail");
    }
}

void print_link(struct Link *p) {
    struct Link *temp = p;
    while (temp->next != NULL) {
        Serial.println(temp->next->anchor_addr, HEX);
        Serial.println(temp->next->range);
        Serial.println(temp->next->dbm);
        temp = temp->next;
    }
}

void delete_link(struct Link *p, uint16_t addr) {
    if (addr == 0) return;

    struct Link *temp = p;
    while (temp->next != NULL) {
        if (temp->next->anchor_addr == addr) {
            struct Link *del = temp->next;
            temp->next = del->next;
            free(del);
            return;
        }
        temp = temp->next;
    }
}

// SSD1306

void logoshow(void) {
    display.clearDisplay();

    display.setTextSize(2);              // Normal 1:1 pixel scale
    display.setTextColor(SSD1306_WHITE); // Draw white text
    display.setCursor(0, 0);             // Start at top-left corner
    display.println(F("AVSTREAM"));

    display.setTextSize(1);
    display.setCursor(0, 20); // Start at top-left corner
    display.println(F("TRACKER v0.10 01062024"));
    display.display();
    delay(2000);
}

void display_uwb(struct Link *p) {
    struct Link *temp = p;
    int row = 0;

    display.clearDisplay();
    display.setTextColor(SSD1306_WHITE);

    if (temp->next == NULL) {
        display.setTextSize(2);
        display.setCursor(0, 0);
        display.println("No Anchor");
        display.display();
        return;
    }

    Serial.println("Displaying anchors:");
    while (temp->next != NULL && row < 3) {  // Only display details for up to 3 anchors
        temp = temp->next;
        Serial.print("Anchor Addr: "); Serial.println(temp->anchor_addr, HEX); // Debug print

        char c[30];
        sprintf(c, "%X: %.1f m", temp->anchor_addr, temp->range);
        display.setTextSize(1);
        display.setCursor(0, row * 16);
        display.println(c);

        sprintf(c, "%.2f dBm", temp->dbm);
        display.setCursor(0, row * 16 + 8);
        display.println(c);

        row++;
    }

    display.display();
    return;
}
